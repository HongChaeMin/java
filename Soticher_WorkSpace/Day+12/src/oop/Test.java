package oop;

public class Test {

	public static void main(String[] args) {
		
		//객체 지향 프로그래밍
		//객체 - Object, 실제로 존재하는 사물 형태(메모리상에 존재_
		//		메모리상에 존재하는 의미있는 데이터 묶음
		
		//클래스 - 객체를 만들어 내기 위한 설계도(레시피)
		
		//구성요소
		//1. 멤버 필드(변수) : 데이터를 저장하는 역할
		//멤버 변수 -> private String name; private int age;
		
		//2. 멤버 메소드 : 코드를 저장하는 역할
		//				void 이름(매개변수){코드}
		//public void setData(String name, int age){}
		//setter, getter
		
		//3. 생성자 -> 객체가 생성될 때 처음으로 한 번 실행되는것(디폴트, 사용자 생성자)
		
		//4. 중첩 클래스	-  클래스 안에 클래스
		
		//ex) 	아메리카노를 만드는 법
		//<재료>		<방법>		<결과>
		//커피		물을 끓여서	아메리카노 1잔
		//도구		...	
		//...
		
		//ex) 	카카오톡 메세지
		//<구성요소>			<결과물>
		//제목				실제 카카오톡 메세지 1개
		//사진
		//동영상
		//내용
		//시간
		//안읽은 사람 수

		//객채지향프로그래밍(OOP : Object Oriented Programming)
		//- 객체 중심의 프로그램을 작성하는 방식
		//- 객체 끼리의 상호 작용을 통하여 프로그램을 작성하는 방식
		
		//- 부품화
		//- 캡슐화 == 클래스
		//	- 속성과 기능을 하나의 블록으로 묶은것
		//- 정보은닉
		//	- 속성과 기능을 보호하기 위해서 접근을 제한한것 ex) private
		//	- 프로그램의 안정적 구현을 위해서
		//-상속성
		//	- 클래스끼리 물려주거나 물려받는 것
		//- 다형성 Animal a = new Dog();
		//	- 다양한 형태나 성질
		//	- 하나의 객체를 여러개의 클래스로 표현하는것
		
		//객체(Object)
		//- 사전적인 의미로는 현실세계에 존재하는 모든 것들
		//- 어떤 대상을 표현하기 위한 정보(속성)을 저장할 수 있는 공간과 그 공간을 컨트롤 할 수 있는
		//	기능 (메소드)을 하느의 루틴으로 묶은 개별적인 개체로써 표현되는 변서
		//- 클래스라는 사용자 정의 자료형으로 만들어진 변수
		
		//클래스
		//- 어떤 대상을 표현하기 위한 정보(속성)을 저장할 수 있는 공간과 그 공간을 컨트롤 할 수 있는
		//	 기능(메소드)를 하나의 블록으로 묶어서 정의한 사용자 정의 자료형
		
		//- 클래스 구성요소
		//	- 속성 + 기능 + 보안(정보은닉)
		//	- 멤버 변수 + 멤버메소드 + 접근지정자 = class(사용자 정의 자료형)
		//- 클래스의 형식
		//class 클래스명{
		//		멤버변수 - 데이터를 저장하는 공간
		//		멤버 메소드 - 클래스의 기능을 정의한 코드의 집합
		//			- 생성자 : 객체 생성시 객체를 준비하기 위한 멤버 메소드
		//			- getter : 멤버 변수의 값을 반환 받기 위한 메소드
		//			- setter : 멤버 변수의 값을 셋팅하기 위한 메소드
		//			- uesr메소드 : 사용자 필요에 의해 만들어지는 메소드
		//}
		
		//--------------------------------------------------------
		
		//접근지정자(접근제한자)
		// - 정보은닉을 사용하기 위해서 사용되는 키워드
		// - 내가 원하든 원하지 않든 자동으로 적용된다.
		
		//- 종류
		//	- private main 접근불가
		//	 - 클래스 내부에서만 접근 가능하고 외부에서는 모두 접근 불가
		//	 - 일반적으로 별다른 제약 없으면 멤버 변수는 private로 설정한다.
		
		//	- protected main 접근 불가, 상속받지 않은 클래스도 접근불가
		//	 - 상속받은 클래스에서는 접근 가능하고 그 외 외부에서는 모두 접근 불가
		//	 - 같은 패키지라면 접근 가능
		//   - 상속에서 다시..
		
		//	- package(default) package만 같으면 모두 접근가능, main 접근 가능
		//	 - 접근지정자의 디폴트값
		//	 - 내가 접근지정자를 적지 않으면 자동으로 적용되는 지정자
		//	 - 패키지 내부에서만 접근이 가능하도록하는 지정자
		
		//	- public main 접근 가능, package가 달라도 접근 가능
		//	 - 클래스 내부와 외부에서 모두 접근 허용
		//	 - 다른 패키지에서 클래스를 import를 통하여 접근이 가능하다.
		//	 - 일반적으로 별 다른 제약 없으면 멤버 메소드는 public으로 설정한다.
		//--------------------------------------------------------
		
		//setter
		//	- 멤버 변수의 값을 셋팅하는 메소드 ex)setData()메소드
		//	- 일반적으로 매개변수명은 멤버변수명과 동일하게 작성한다. ex)int getAge() void setAge()
		//	 - 상황에 따라서는 멤버변수명의 앞에 _를 붙이거나 줄임말을 사용하기도 한다.
		
		// - 형식
		//		void set멤버변수명(매개변수){코드정의} //멤버변수 : ex)String name,int age
		
		//getter
		//	- 멤버 변수의 값을 반환하는 메소드
		// - 형식
		//		자료형 get멤버변수명() { 코드정의 return멤버변수; }
		
		//-----------------------------------------------------------------
		//객체 생성과정
		// - 공간 할당 -> 생성자 호출
		
		//생성자
		// - 객체를 생성시 호출하는 메소드
		// - 객체를 준비할때 사용된다..주로 멤버 변수 초기화를 할때 이용한다.
		// - 생성자는 객체 생성시에만 단 한번만 호출 할 수 있다.
		// - 우리가 생성자를 정의 하지 않으면 자동으로 생성자가 만들어진다. - 디폴트 생성자
		// - 생성자 안에서 다른 생성자를 호출 할 수 있다. this..
		
		//형식
		//	1.반환 자료형은 존재하지 않는다.반환값이 없다
		//	2.메소드명은 반드시 클래스명과 동일하여야한다.
		//	3.매개변수를 가질 수 있다.. 오버로드가 가능하다. 여러개가 존재할 수 있다.
		//		- 객체 생성시 상황에 따른 객체를 생성하기 위해 여러개를 정의한다.
		
		//	클래스명(매개변수){
		//		코드정의;
		//	}
		//------------------------------------------------------------
		//디폴트 생성자
		// - 객체 생성 과정의 순서 유지를 위해서 자동으로 만들어진다.
		// - 코드가 존재하지않는다. 기능이 없다
		// - 생성자를 하나라도 정의하면 디폴트 생성자는 만들어지지 않는다
		// 클래스명(){
		
		//}
	}
		
}


